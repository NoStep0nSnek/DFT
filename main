#include<iostream>
#include<vector>
#include<complex>
#include<math.h>
#include<stdio.h>
#include<iomanip>

#define SR 4000 // Sample rate, in hertz. Should be at least 4x as much as the frequency

using namespace std;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////  

vector<complex<double>> DFT(std::vector<complex<double>> X)
{
    int N = X.size();
    int K = N;

    // Allocate memory for internals
    complex<double> intSum;

    // Allocate memory for output
    vector<complex<double>> output;
    output.reserve(K);

    for (int k = 0; k < K; k++) {
        //loop through each n
        intSum = complex<double>(0,0);
        for (int n = 0; n < N; n++) {
            double realPart = cos(((2 * M_PI) / N) * k * n);
            double ImgPart = sin(((2 * M_PI) / N) * k * n);
            complex<double> w (realPart, ImgPart);
            intSum += X[n] * w;
        }
        output.push_back(intSum);
    }

    return output;
}

vector<complex<double>> generate_sine_wave (float freq, float amplitude, float offset, int SampleRate) {
    vector<complex<double>> wave(SampleRate);
    
    float time = 0;
    for(int i = 0; i < SampleRate; i++)
    {
        auto f = complex<double>(int(amplitude * sin(2 * M_PI * freq * time) + offset), 0.0);
        time += (1.0 / SampleRate);
        wave[i] = f;
    }

    return wave;
}

int main() {

    
    int SL = SR; // signal length
    vector<complex<double>> base;
    base.reserve(SL * 2);
    vector<complex<double>> wave1 = generate_sine_wave(200, 32768, 0, SR);
    base.insert(base.end(), wave1.begin(), wave1.end());
    vector<complex<double>> wave2 = generate_sine_wave(400, 32768, 0, SR);
    base.insert(base.end(), wave2.begin(), wave2.end());

    //float duration = 1;
    
    //vector<complex<double>> Fx = DFT(base);
    
    for (int i = 0; i < round(base.size() / SR); i++) {
        vector<complex<double>> signal(SR);

        for (int k = 0; k < SR; k++)  {
            signal[k] = base[i * SR + k];
        }

        vector<complex<double>> Fx = DFT(signal);

        for (int j = 0; j < 1000; j++) {
            //cout << std::fixed << std::setprecision(3) << j << " | Real: " << Fx[j].real() / static_cast<double>(SL) << ", Imag:" << Fx[j].imag() / static_cast<double>(SL) << "\n";
            if (Fx[j].imag() / static_cast<double>(SL) >= .498) {
                cout << "\nFrequency = " << j << " | " << Fx[j].imag() / static_cast<double>(SL);
                break;
            }
        }
    }
}
